void	range_sort(t_stack *stack_a, t_stack *stack_b)
{
	int	range_threshold;
	int	min_range;
	int	current_value;
	int	max_value;
	int	max_pos;
	int	mid_point;

	range_threshold = calculate_range_threshold(stack_a);
	min_range = 0;
	while (stack_a->head)
	{
		current_value = stack_a->head->value;
		if (current_value > range_threshold)
		{
			if (stack_a->size == 1)
				break ;
			ra(stack_a);
		}
		else if (current_value < min_range)
		{
			pb(stack_a, stack_b);
			rb(stack_b);
			range_threshold++;
			min_range++;
		}
		else if (current_value >= min_range && current_value <= range_threshold)
		{
			pb(stack_a, stack_b);
			range_threshold++;
			min_range++;
		}
	}
	while (stack_b->head)
	{
		max_value = find_max_value(stack_b);
		max_pos = find_value_position(stack_b, max_value);
		mid_point = stack_b->size / 2;
		if (max_pos >= mid_point)
		{
			while (stack_b->head->value != max_value)
				rrb(stack_b);
		}
		else
		{
			while (stack_b->head->value != max_value)
				rb(stack_b);
		}
		pa(stack_a, stack_b);
	}
}